<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.nju.data.dao.mapper.RepositoryMapper" >
  <resultMap id="BaseResultMap" type="edu.nju.data.model.Repository" >
    <id column="full_name" property="full_name" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="owner_name" property="owner_name" jdbcType="CHAR" />
    <result column="language" property="language" jdbcType="CHAR" />
    <result column="open_issues_count" property="open_issues_count" jdbcType="INTEGER" />
    <result column="watchers_count" property="watchers_count" jdbcType="INTEGER" />
    <result column="clone_url" property="clone_url" jdbcType="CHAR" />
    <result column="html_url" property="html_url" jdbcType="CHAR" />
    <result column="homepage" property="homepage" jdbcType="CHAR" />
    <result column="created_at" property="created_at" jdbcType="TIMESTAMP" />
    <result column="pushed_at" property="pushed_at" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updated_at" jdbcType="TIMESTAMP" />
    <result column="size" property="size" jdbcType="INTEGER" />
    <result column="stargazers_count" property="stargazers_count" jdbcType="INTEGER" />
    <result column="forks_count" property="forks_count" jdbcType="INTEGER" />
    <result column="subscribers_count" property="subscribers_count" jdbcType="INTEGER" />
    <result column="languages" property="languages" jdbcType="VARCHAR" />
    <result column="size_score" property="size_score" jdbcType="DOUBLE" />
    <result column="scale_score" property="scale_score" jdbcType="DOUBLE" />
    <result column="promising_score" property="promising_score" jdbcType="DOUBLE" />
    <result column="participation_score" property="participation_score" jdbcType="DOUBLE" />
    <result column="hot_score" property="hot_score" jdbcType="DOUBLE" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="edu.nju.data.model.Repository" extends="BaseResultMap" >
    <result column="description" property="description" jdbcType="LONGVARCHAR" />
  </resultMap>
  <resultMap id="simpleRepo" type="edu.nju.data.model.SimpleRepo">
    <id column="full_name" property="full_name" jdbcType="CHAR" />
    <result column="language" property="language" jdbcType="CHAR" />
    <result column="description" property="description" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    full_name, name, owner_name, language, open_issues_count, watchers_count, clone_url, 
    html_url, homepage, created_at, pushed_at, updated_at, size, stargazers_count, forks_count, 
    subscribers_count, languages, size_score, scale_score, promising_score, participation_score, 
    hot_score
  </sql>
  <sql id="Blob_Column_List" >
    description
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where full_name = #{full_name,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from repository
    where full_name = #{full_name,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="edu.nju.data.model.Repository" >
    insert into repository (full_name, name, owner_name, 
      language, open_issues_count, watchers_count, 
      clone_url, html_url, homepage, 
      created_at, pushed_at, updated_at, 
      size, stargazers_count, forks_count, 
      subscribers_count, languages, size_score, 
      scale_score, promising_score, participation_score, 
      hot_score, description)
    values (#{full_name,jdbcType=CHAR}, #{name,jdbcType=CHAR}, #{owner_name,jdbcType=CHAR}, 
      #{language,jdbcType=CHAR}, #{open_issues_count,jdbcType=INTEGER}, #{watchers_count,jdbcType=INTEGER}, 
      #{clone_url,jdbcType=CHAR}, #{html_url,jdbcType=CHAR}, #{homepage,jdbcType=CHAR}, 
      #{created_at,jdbcType=TIMESTAMP}, #{pushed_at,jdbcType=TIMESTAMP}, #{updated_at,jdbcType=TIMESTAMP}, 
      #{size,jdbcType=INTEGER}, #{stargazers_count,jdbcType=INTEGER}, #{forks_count,jdbcType=INTEGER}, 
      #{subscribers_count,jdbcType=INTEGER}, #{languages,jdbcType=VARCHAR}, #{size_score,jdbcType=DOUBLE}, 
      #{scale_score,jdbcType=DOUBLE}, #{promising_score,jdbcType=DOUBLE}, #{participation_score,jdbcType=DOUBLE}, 
      #{hot_score,jdbcType=DOUBLE}, #{description,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="edu.nju.data.model.Repository" >
    insert into repository
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="full_name != null" >
        full_name,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="owner_name != null" >
        owner_name,
      </if>
      <if test="language != null" >
        language,
      </if>
      <if test="open_issues_count != null" >
        open_issues_count,
      </if>
      <if test="watchers_count != null" >
        watchers_count,
      </if>
      <if test="clone_url != null" >
        clone_url,
      </if>
      <if test="html_url != null" >
        html_url,
      </if>
      <if test="homepage != null" >
        homepage,
      </if>
      <if test="created_at != null" >
        created_at,
      </if>
      <if test="pushed_at != null" >
        pushed_at,
      </if>
      <if test="updated_at != null" >
        updated_at,
      </if>
      <if test="size != null" >
        size,
      </if>
      <if test="stargazers_count != null" >
        stargazers_count,
      </if>
      <if test="forks_count != null" >
        forks_count,
      </if>
      <if test="subscribers_count != null" >
        subscribers_count,
      </if>
      <if test="languages != null" >
        languages,
      </if>
      <if test="size_score != null" >
        size_score,
      </if>
      <if test="scale_score != null" >
        scale_score,
      </if>
      <if test="promising_score != null" >
        promising_score,
      </if>
      <if test="participation_score != null" >
        participation_score,
      </if>
      <if test="hot_score != null" >
        hot_score,
      </if>
      <if test="description != null" >
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="full_name != null" >
        #{full_name,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=CHAR},
      </if>
      <if test="owner_name != null" >
        #{owner_name,jdbcType=CHAR},
      </if>
      <if test="language != null" >
        #{language,jdbcType=CHAR},
      </if>
      <if test="open_issues_count != null" >
        #{open_issues_count,jdbcType=INTEGER},
      </if>
      <if test="watchers_count != null" >
        #{watchers_count,jdbcType=INTEGER},
      </if>
      <if test="clone_url != null" >
        #{clone_url,jdbcType=CHAR},
      </if>
      <if test="html_url != null" >
        #{html_url,jdbcType=CHAR},
      </if>
      <if test="homepage != null" >
        #{homepage,jdbcType=CHAR},
      </if>
      <if test="created_at != null" >
        #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="pushed_at != null" >
        #{pushed_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null" >
        #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null" >
        #{size,jdbcType=INTEGER},
      </if>
      <if test="stargazers_count != null" >
        #{stargazers_count,jdbcType=INTEGER},
      </if>
      <if test="forks_count != null" >
        #{forks_count,jdbcType=INTEGER},
      </if>
      <if test="subscribers_count != null" >
        #{subscribers_count,jdbcType=INTEGER},
      </if>
      <if test="languages != null" >
        #{languages,jdbcType=VARCHAR},
      </if>
      <if test="size_score != null" >
        #{size_score,jdbcType=DOUBLE},
      </if>
      <if test="scale_score != null" >
        #{scale_score,jdbcType=DOUBLE},
      </if>
      <if test="promising_score != null" >
        #{promising_score,jdbcType=DOUBLE},
      </if>
      <if test="participation_score != null" >
        #{participation_score,jdbcType=DOUBLE},
      </if>
      <if test="hot_score != null" >
        #{hot_score,jdbcType=DOUBLE},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="edu.nju.data.model.Repository" >
    update repository
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=CHAR},
      </if>
      <if test="owner_name != null" >
        owner_name = #{owner_name,jdbcType=CHAR},
      </if>
      <if test="language != null" >
        language = #{language,jdbcType=CHAR},
      </if>
      <if test="open_issues_count != null" >
        open_issues_count = #{open_issues_count,jdbcType=INTEGER},
      </if>
      <if test="watchers_count != null" >
        watchers_count = #{watchers_count,jdbcType=INTEGER},
      </if>
      <if test="clone_url != null" >
        clone_url = #{clone_url,jdbcType=CHAR},
      </if>
      <if test="html_url != null" >
        html_url = #{html_url,jdbcType=CHAR},
      </if>
      <if test="homepage != null" >
        homepage = #{homepage,jdbcType=CHAR},
      </if>
      <if test="created_at != null" >
        created_at = #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="pushed_at != null" >
        pushed_at = #{pushed_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null" >
        updated_at = #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null" >
        size = #{size,jdbcType=INTEGER},
      </if>
      <if test="stargazers_count != null" >
        stargazers_count = #{stargazers_count,jdbcType=INTEGER},
      </if>
      <if test="forks_count != null" >
        forks_count = #{forks_count,jdbcType=INTEGER},
      </if>
      <if test="subscribers_count != null" >
        subscribers_count = #{subscribers_count,jdbcType=INTEGER},
      </if>
      <if test="languages != null" >
        languages = #{languages,jdbcType=VARCHAR},
      </if>
      <if test="size_score != null" >
        size_score = #{size_score,jdbcType=DOUBLE},
      </if>
      <if test="scale_score != null" >
        scale_score = #{scale_score,jdbcType=DOUBLE},
      </if>
      <if test="promising_score != null" >
        promising_score = #{promising_score,jdbcType=DOUBLE},
      </if>
      <if test="participation_score != null" >
        participation_score = #{participation_score,jdbcType=DOUBLE},
      </if>
      <if test="hot_score != null" >
        hot_score = #{hot_score,jdbcType=DOUBLE},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where full_name = #{full_name,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="edu.nju.data.model.Repository" >
    update repository
    set name = #{name,jdbcType=CHAR},
      owner_name = #{owner_name,jdbcType=CHAR},
      language = #{language,jdbcType=CHAR},
      open_issues_count = #{open_issues_count,jdbcType=INTEGER},
      watchers_count = #{watchers_count,jdbcType=INTEGER},
      clone_url = #{clone_url,jdbcType=CHAR},
      html_url = #{html_url,jdbcType=CHAR},
      homepage = #{homepage,jdbcType=CHAR},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      pushed_at = #{pushed_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP},
      size = #{size,jdbcType=INTEGER},
      stargazers_count = #{stargazers_count,jdbcType=INTEGER},
      forks_count = #{forks_count,jdbcType=INTEGER},
      subscribers_count = #{subscribers_count,jdbcType=INTEGER},
      languages = #{languages,jdbcType=VARCHAR},
      size_score = #{size_score,jdbcType=DOUBLE},
      scale_score = #{scale_score,jdbcType=DOUBLE},
      promising_score = #{promising_score,jdbcType=DOUBLE},
      participation_score = #{participation_score,jdbcType=DOUBLE},
      hot_score = #{hot_score,jdbcType=DOUBLE},
      description = #{description,jdbcType=LONGVARCHAR}
    where full_name = #{full_name,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.nju.data.model.Repository" >
    update repository
    set name = #{name,jdbcType=CHAR},
      owner_name = #{owner_name,jdbcType=CHAR},
      language = #{language,jdbcType=CHAR},
      open_issues_count = #{open_issues_count,jdbcType=INTEGER},
      watchers_count = #{watchers_count,jdbcType=INTEGER},
      clone_url = #{clone_url,jdbcType=CHAR},
      html_url = #{html_url,jdbcType=CHAR},
      homepage = #{homepage,jdbcType=CHAR},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      pushed_at = #{pushed_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP},
      size = #{size,jdbcType=INTEGER},
      stargazers_count = #{stargazers_count,jdbcType=INTEGER},
      forks_count = #{forks_count,jdbcType=INTEGER},
      subscribers_count = #{subscribers_count,jdbcType=INTEGER},
      languages = #{languages,jdbcType=VARCHAR},
      size_score = #{size_score,jdbcType=DOUBLE},
      scale_score = #{scale_score,jdbcType=DOUBLE},
      promising_score = #{promising_score,jdbcType=DOUBLE},
      participation_score = #{participation_score,jdbcType=DOUBLE},
      hot_score = #{hot_score,jdbcType=DOUBLE}
    where full_name = #{full_name,jdbcType=CHAR}
  </update>
  <insert id="insertContribute" >
    set  @@session.foreign_key_checks = 0;
    insert into contribute (full_name, login)
    values (#{0},#{1})
  </insert>

  <insert id="insertCollaborate" >
    set  @@session.foreign_key_checks = 0;
    insert into collaborate (full_name, login)
    values (#{0},#{1})
  </insert>

  <insert id="insertSubscribe" >
    set  @@session.foreign_key_checks = 0;
    insert into subscribe (full_name, login)
    values (#{0},#{1})
  </insert>

  <update id="updateUpdatedAt">
    update repository
    set updated_at = #{1}
    where full_name = #{0}
  </update>
  <select id="selectByFullName" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
    where full_name = #{fullName,jdbcType=VARCHAR}
  </select>
  <select id="selectFullName" resultType="java.lang.String" >
    select full_name
    from repository
  </select>
  <select id="selectAll" resultMap="ResultMapWithBLOBs" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repository
  </select>
  <select id="enlargeViaSubscribers" resultType="java.lang.String">
    SELECT full_name FROM subscribe
    WHERE login IN (
    SELECT login
    FROM subscribe
    WHERE full_name = #{0}
    )
    GROUP BY full_name
    ORDER BY count(full_name) DESC
    LIMIT #{1};
  </select>
  <select id="getContributors" resultType="java.lang.String" parameterType="java.lang.String">
    select login
    from contribute
    where full_name = #{full_name}
  </select>
  <select id="getCollaborators" resultType="java.lang.String" parameterType="java.lang.String">
    select login
    from collaborate
    where full_name = #{full_name}
  </select>
  <select id="selectHotScore_Extern" resultType="java.lang.Double">
    select count(full_name)/(SELECT count(*) FROM repository)
    from repository
    where  #{0}+#{1}>forks_count+stargazers_count
  </select>
  <select id="selectParticipationScore_Extern" resultType="java.lang.Double">
    select count(full_name)/(SELECT count(*) FROM repository)
    from repository
    where  #{0}*3+#{1}>forks_count*3+open_issues_count
  </select>
  <select id="selectSizeScore_Extern" resultType="java.lang.Double">
    select count(full_name)/(SELECT count(*) FROM repository WHERE LANGUAGE = #{1})
    from repository
    where  #{0}>size and #{1}=language
  </select>
  <select id="countContributors" resultType="java.lang.Integer">
    select count(login)
    from contribute
    group by full_name
  </select>
  <select id="countAll" resultType="java.lang.Integer">
    select count(full_name)
    from repository
  </select>
  <select id="selectRankOfHot" resultType="java.lang.Integer">
    Set @rank:=0;
    Select rank
    From (
    Select full_name, @rank:=@rank+1 As rank
    From repository
    Order By (forks_count+stargazers_count+watchers_count)
    ) tb
    where full_name = #{full_name};
  </select>
  <select id="getLan_SingleRepo" resultType="java.lang.String" parameterType="java.lang.String">
    select language
    from repository
    where full_name = #{full_name}
  </select>
  <select id="countLanguage" resultType="java.lang.Integer" parameterType="java.lang.String">
    select count(full_name)as c
    from repository
    where language = #{language}
  </select>
  <select id="selectRankOfSize" resultType="java.lang.Integer">
    Set @rank:=0;
    Select rank
    From (
    Select full_name, @rank:=@rank+1 As rank
    From repository
    WHERE language IN (
    SELECT language FROM repository
    WHERE full_name = #{full_name}
    )
    Order By size
    ) tb
    where full_name = #{full_name};
  </select>
  <select id="selectRankOfParticipation" resultType="java.lang.Integer">
    Set @rank:=0;
    Select rank
    From (
    Select full_name, @rank:=@rank+1 As rank
    From repository
    Order By (open_issues_count+forks_count*3)
    ) tb
    where full_name = #{full_name};
  </select>
  <select id="selectRankOfPromising" resultType="java.lang.Integer">
    Set @rank:=0;
    Select rank
    From (
    Select full_name, @rank:=@rank+1 As rank
    From repository
    Order By updated_at
    ) tb
    where full_name = #{full_name};
  </select>
  <select id="selectRankOfContributors" resultType="java.lang.Integer">
    Set @rank:=0;
    Select rank/(SELECT count(DISTINCT full_name) FROM contribute)
    From (
    Select full_name, @rank:=@rank+1 As rank
    From contribute
    Group By full_name
    Order By count(*)
    ) tb
    where full_name = #{full_name};
  </select>
  <select id="getLastUpdate_Three" resultType="java.lang.String">
    select full_name
    from repository
    order by updated_at desc
    limit 3;
  </select>
  <select id="getReposDescription" resultType="java.lang.String" parameterType="java.lang.String">
    select description
    from repository
    where full_name=#{login}
  </select>
  <select id="getRepoUrl" resultType="java.lang.String" parameterType="java.lang.String">
    select html_url
    from repository
    where full_name=#{name}
  </select>
  <select id="getAllSimpleRepo" resultMap="simpleRepo">
    select full_name,language,description
    from repository
  </select>
</mapper>